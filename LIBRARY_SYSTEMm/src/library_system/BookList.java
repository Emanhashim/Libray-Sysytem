/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library_system;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author cs
 */
public class BookList extends javax.swing.JFrame {

    /**
     * Creates new form BookList
     */
    public BookList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblebooklist = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("            book-List");

        tblebooklist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Author", "Publisher", "Price", "Edition", "Year", "Qauntity"
            }
        ));
        jScrollPane1.setViewportView(tblebooklist);

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(btnNew)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(btnRefresh)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnNew)
                    .addComponent(jButton1)
                    .addComponent(btnRefresh)
                    .addComponent(btnCancel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        deleteFaculty();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        insertemployee();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnNewActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateEmployee();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        readFaculty();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblebooklist;
    // End of variables declaration//GEN-END:variables

    Connection conn = null;
    Statement stmt = null;
    ResultSet rst = null;

    private void readFaculty() {

        DefaultTableModel facultyTblModel = (DefaultTableModel) tblebooklist.getModel();
        facultyTblModel.setRowCount(0);
        String sql = "Select * From book order by Title ASC";
        try {
            conn = Conection.getConn();
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rst = stmt.executeQuery(sql);
            int row = 0;
            while (rst.next()) {
                facultyTblModel.addRow(new Object[]{rst.getString("ISBN"), rst.getString("Title"), rst.getString("Authour"), rst.getString("Publisher"), rst.getString("Price"), rst.getString("Eddition"), rst.getString("Year"), rst.getString("Quantity")});
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database server error" + e.getMessage());
        } finally {
        }

    }

    //******************Table Action Column****************************//

    private void setTableActionColumn() {
        TableColumn tbcAction = tblebooklist.getColumnModel().getColumn(5);
        JCheckBox cmbDelete = new JCheckBox();
        tbcAction.setCellEditor(new DefaultCellEditor(cmbDelete));
    }

    private void insertemployee() {
        DefaultTableModel facultyTblModel = (DefaultTableModel) tblebooklist.getModel();
        if (btnNew.getText().equalsIgnoreCase("New")) {
            int emptrow = facultyTblModel.getRowCount() + 1;
            facultyTblModel.setRowCount(emptrow);
            btnNew.setText("Save");
        } else {
            int newrow = facultyTblModel.getRowCount() - 1;
            try {
                rst.moveToInsertRow();
                rst.updateString("ISBN", facultyTblModel.getValueAt(newrow, 1).toString());
                rst.updateString("Title", facultyTblModel.getValueAt(newrow, 2).toString());
                rst.updateString("Authour", facultyTblModel.getValueAt(newrow, 3).toString());
                rst.updateString("Publisher", facultyTblModel.getValueAt(newrow, 4).toString());
                rst.updateString("Price", facultyTblModel.getValueAt(newrow, 5).toString());
                rst.updateString("Eddition", facultyTblModel.getValueAt(newrow, 6).toString());
                rst.updateString("Year", facultyTblModel.getValueAt(newrow, 7).toString());
                rst.updateString("Quantity", facultyTblModel.getValueAt(newrow, 8).toString());
                rst.insertRow();
                rst.moveToCurrentRow();
                JOptionPane.showMessageDialog(this, "Record saved successfully.");
                btnNew.setText("New");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Database server error" + e.getMessage());
            }
        }
    }

    private void updateEmployee() {
        DefaultTableModel facultyTblModel = (DefaultTableModel) tblebooklist.getModel();
        try {
            int resp = JOptionPane.showConfirmDialog(this, "Are you sure you want to update the selected record?");
            if (resp == JOptionPane.YES_OPTION) {
                int row = tblebooklist.getSelectedRow() + 1;
                rst.absolute(row);
                rst.updateString("ISBN", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 1).toString());
                rst.updateString("Title", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 2).toString());
                rst.updateString("Authour", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 3).toString());
                rst.updateString("Publisher", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 4).toString());
                rst.updateString("Price", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 5).toString());
                rst.updateString("Edition", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 6).toString());
                rst.updateString("Year", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 7).toString());
                rst.updateString("Quantity", facultyTblModel.getValueAt(tblebooklist.getSelectedRow(), 8).toString());
                rst.updateRow();
                JOptionPane.showMessageDialog(this, "Record updated successfully.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database server error");
        }
    }

    private void deleteFaculty() {
        try {
            int resp = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected record?");
            if (resp == JOptionPane.YES_OPTION) {
                int row = tblebooklist.getSelectedRow() + 1;
                rst.absolute(row);
                rst.deleteRow();
                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database server error" + e.getMessage());
        }
    }

}
